name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:

  # See https://mozilla.github.io/cargo-vet/configuring-ci.html
  cargo-vet:
    name: Vet Dependencies
    runs-on: ubuntu-latest
    env:
      CARGO_VET_VERSION: 0.10.0
    steps:
      - uses: actions/checkout@master
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/cargo-vet
          key: cargo-vet-bin-${{ env.CARGO_VET_VERSION }}
      - run: echo "${{ runner.tool_cache }}/cargo-vet/bin" >> $GITHUB_PATH
      - run: cargo install --root ${{ runner.tool_cache }}/cargo-vet --version ${{ env.CARGO_VET_VERSION }} cargo-vet
      - run: cargo vet --locked

  test_mrsv:
    name: "Test MRSV"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo rust_version="$(cargo metadata --no-deps --format-version 1 | jq -r '.packages | map(select(.name == "wol")) | first | .rust_version')" >> "${GITHUB_OUTPUT}"
        id: rust_version
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust_version.outputs.rust_version }}
      - run: cargo build --locked --all-features
      - run: cargo test --locked --all-features

  test:
    name: "Test & lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - run: cargo fmt --check
      # Just the library crate
      - run: cargo build --locked
      # Regular CLI build, for use e.g. in distribution packages
      - run: cargo build --locked --features cli
      # Test all features build for manpage, etc.
      - run: cargo build --locked --all-features
      - run: cargo clippy --locked --all-targets --all-features
      - run: cargo test --locked --all-features
      - run: cargo doc
      - name: cargo deny check
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          rust-version: stable

  test-windows:
    name: "Test Windows"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo build --locked --all-features
      - run: cargo test --locked --all-features
